#!/usr/bin/env groovy
import hudson.model.*
import jenkins.model.Jenkins
import org.jenkinsci.plugins.workflow.steps.FlowInterruptedException
import hudson.AbortException




node {
@Library('libraries')_
def buildResult = "SUCCESS"
env.workspace = pwd()
echo "$workspace"
def branchdetails = "$env.BRANCH_NAME"
echo "this is $branchdetails"
def devbranch = ""
def relbranch = ""
def jobName = "${env.JOB_NAME}".split('/').first()
echo " ${jobName}"

echo "${env.JOB_NAME}"
echo "${env.JOB_BASE_NAME}"

def machine1 = "tsgvm00827"
def application = "omx-inbound"
def pomversion = ""
def appstopscript = "inboundstop.sh"
def appstartscript = "inboundstart.sh"
def serviceAccount = "omxuser"
try {

dir ("$workspace") {
	echo "checking out project version repo"
	checkout([
        $class: 'GitSCM', 
        branches: [[name: "*/master"]], 
        doGenerateSubmoduleConfigurations: false, 
        extensions: [[$class: 'CleanBeforeCheckout'], [$class: 'RelativeTargetDirectory', relativeTargetDir: "$workspace/Projectversion"]], 
        submoduleCfg: [], 
        userRemoteConfigs: [[url: 'git@github.xposc.com:BusApp-OMX/Projectversion.git']]])
	    
		
	}	
    
	dir("$workspace/Projectversion") {
		if (fileExists("deploy.properties")) {
			echo "file deploy.properties exists"
			def props = readProperties file: "deploy.properties"
			 relbranch = props."OMX-Release-Branch"
			 echo "$relbranch"
			 devbranch = props."OMX-Release-Branch-Development"
			 echo "$devbranch"
	} else {
		echo "deploy.properties file doesnt exist"
		
		sh "exit 1"
	         }
		}
	
	
	
	if ("$branchdetails" == "$relbranch") {

dir("${workspace}/${application}"){
			
           checkout scm
		   
   def pom = readMavenPom file: "pom.xml"
    pomversion = pom.version
    pomname = pom.name
   echo "POM Name: $pomname"
    echo "POM Version: $pomversion"
	
	currentBuild.displayName = "$pomversion.${build_number}"
} 


} else {

def versionNumberString = Jenkins.instance.getItem("build_number")
def builddisplay = Jenkins.instance.getItem("currentBuild.displayName")
def version = VersionNumber(versionNumberString: '${build_number}', skipFailedBuilds:true, versionPrefix: "$branchdetails.")
currentBuild.displayName = "$version"

}

def versionresult = currentBuild.displayName
echo "this is $versionresult"
	
OMbuild {

 omxparentgit = "git@github.xposc.com:BusApp-OMX/omx-parent.git"
 branchname = "Release"
 appname = "omx-inbound"
 appdir = "omx-inbound"
 dependencyproperties = "dependency.properties"
 command = "clean package -DskipTests=true -PbuildOmxInbound -f pom.xml"

 }
 
 				if ("$branchdetails" == "$relbranch") {
				 Oldbuildsdiscard {
				
							days = ""
							builds = "15"
						}
				} else {
					Oldbuildsdiscard {
					 days = ""
					 builds = "5"
					}
				}

archiving {
    path = "/omx-inbound/target"
    type = "*.jar,*.war"
    
    }
    
    dir("${workspace}/${application}"){
				
def pom = readMavenPom file: "pom.xml"
    pomversion = pom.version
    pomname = pom.name
   echo "POM Name: $pomname"
    echo "POM Version: $pomversion"
}


	def appartifact = "${pomname}.jar" 
	echo "$appartifact"
	
if ("$branchdetails" == "$relbranch") {

echo "Starting with the Fortify Scan"
				build job: 'OMX-Inbound-FortifyScan',
				parameters: [string(name: 'version', value: "${versionresult}"),
				string(name: 'branch', value: "${branchdetails}")],
							 
				wait: false
				
				
	 echo "starting artifact backup"
omxcmxartifactbackup {
	projectversion = "git@github.xposc.com:BusApp-OMX/Projectversion.git"
	machine = "tsgvm00386"
	properties = "deploy.properties"
	appname = "OMX"
	pomversiondetails = "$pomversion"
	type = "jar,war"
	artifactname = "$appartifact"
	artifactdir = "omx-inbound"
	path = "omx-inbound/target"
	branch = "$branchdetails"
	
       dir = "Projectversion"
  }
} else {

 echo "skipping archiving artifacts"
}

if ("$branchdetails" == "$relbranch") {

dir("$workspace/$application") {

	gittag {
		
	command = "git tag -a ${versionresult} -m 'Jenkins Build'"
	giturl = "github.xposc.com/BusApp-OMX/omx-inbound.git"
		
	}
     }				
} else {

 echo "skipping git tagging"
}

	
if ("$branchdetails" == "$devbranch") {
	

	stage ('deploy-to-Dev') {
sh "echo deploying to Dev environment" 
dir ("$workspace/$application/target") {

sh """
						chmod 755 *.jar
						echo "deploying ${application} on ${machine1}"
						echo "stoping ${application} application ${machine1}"
						ssh ${serviceAccount}@${machine1} /home/omxuser/bin/$appstopscript &
						sleep 15"""
						sh"""echo "removing the existing ${application} jar file"
						ssh ${serviceAccount}@${machine1} rm -rf /apps/OMX/${application}/$appartifact
						echo "copying $appartifact  file"
						scp -rp $appartifact ${serviceAccount}@${machine1}:/apps/OMX/${application}/
						echo "starting ${application} application ${machine1}"
						ssh ${serviceAccount}@${machine1} /home/omxuser/bin/$appstartscript &
						sleep 50"""
					}	
	}
} else {

echo "development branch doesnt match so not deploying dev environment"


 }


} catch (any) {

buildResult = "FAILURE"

throw any
 
  
} finally {

    

     echo "Current build result = $buildResult"
     currentBuild.result = buildResult
     
	
     standardemail {
     
     projectversion = "git@github.xposc.com:BusApp-OMX/Projectversion.git"
     dir = "Projectversion"
     properties = "deploy.properties"
     buildStatus = "$buildResult"
     appname = "Inbound"
     jobBaseName = "$jobName"
     message = "$application has been successfully build"
     env = "Dev"
     
     echo "y : $buildStatus"
     
   }
 }
 
}
